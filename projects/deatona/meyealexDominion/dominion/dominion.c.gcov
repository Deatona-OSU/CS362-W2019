        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 0 returned 0% blocks executed 0%
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
call    0 never executed
    #####:   45:  PutSeed((long)randomSeed);
call    0 never executed
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 0 returned 0% blocks executed 0%
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
branch  0 never executed
branch  1 never executed
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 never executed
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  215:    card = floor(Random() * state->deckCount[player]);
call    0 never executed
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 never executed
branch  1 never executed
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5 returned 100% blocks executed 100%
        5:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 100%
       10:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        9:  401:  j = 0;
      234:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      225:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  405:	{
       26:  406:	  j++;
        -:  407:	}
        -:  408:    }
        9:  409:  if ( j >= 3)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  410:    {
        5:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 11 returned 100% blocks executed 88%
       11:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       11:  420:  int score = 0;
        -:  421:  //score from hand
     4511:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  423:    {
     4500:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
     4500:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
     4500:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
     4500:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     4500:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     4500:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     5011:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  434:    {
     5000:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
     5000:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
     5000:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     5000:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
     5000:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     5000:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     5011:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  445:    {
     5000:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
     5000:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
     5000:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
     5000:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     5000:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     5000:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
       11:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 1 returned 100% blocks executed 94%
        1:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
        5:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
        4:  467:      if (i >= state->numPlayers)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
        4:  473:	  players[i] = scoreFor (i, state);
call    0 returned 100%
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
        1:  478:  j = 0;
        5:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  480:    {
        4:  481:      if (players[i] > players[j])
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  482:	{
        1:  483:	  j = i;
        -:  484:	}
        -:  485:    }
        1:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
        1:  489:  currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  491:    {
        4:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
        1:  499:  j = 0;
        5:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  501:    {
        4:  502:      if ( players[i] > players[j] )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  503:	{
        1:  504:	  j = i;
        -:  505:	}
        -:  506:    }
        1:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
        5:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  511:    {
        4:  512:      if ( players[i] == highScore )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  513:	{
        1:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
        3:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
        1:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 7 returned 100% blocks executed 38%
        7:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        7:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        7:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        7:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        7:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        7:  576:    state->deckCount[player]--;
        7:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        7:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 6 returned 100% blocks executed 27%
        6:  583:int getCost(int cardNumber)
        -:  584:{
        6:  585:  switch( cardNumber ) 
branch  0 taken 17%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 17%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 17%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 17%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 17%
branch 27 taken 17%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// Assignment 2 card effects
        -:  647:
        -:  648:// Smithy card effect
function smithyCardEffect called 1 returned 100% blocks executed 100%
        1:  649:int smithyCardEffect(struct gameState* state, int currentPlayer, int handPos) {
        -:  650:  //+3 Cards
        -:  651:  int i;
        4:  652:  for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  653:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  654:	}
        -:  655:			
        -:  656:  //discard card from hand
        1:  657:  discardCard(0, currentPlayer, state, 0);
call    0 returned 100%
        -:  658:  
        1:  659:  return 0;
        -:  660:}
        -:  661:
        -:  662:// Adventurer card effect
function adventurerCardEffect called 1 returned 100% blocks executed 67%
        1:  663:int adventurerCardEffect(int drawntreasure, struct gameState* state, int currentPlayer, int* temphand) {
        1:  664:  int z = 0;
        -:  665:  int cardDrawn;
        4:  666:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  667:	  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  668:	    shuffle(currentPlayer, state);
call    0 never executed
        -:  669:	  }
        2:  670:	  drawCard(currentPlayer, state);
call    0 returned 100%
        2:  671:	  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  672:	  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  673:	    drawntreasure++;
        -:  674:	  else{
    #####:  675:	    temphand[z]=cardDrawn;
    #####:  676:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:	    z++;
        -:  678:	  }
        -:  679:  }
        2:  680:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  681:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:	  z=z-1;
        -:  683:  }
        1:  684:  return 0;
        -:  685:}
        -:  686:
        -:  687:// Feast card effect
function feastCardEffect called 0 returned 0% blocks executed 0%
    #####:  688:int feastCardEffect(int choice1, struct gameState* state, int currentPlayer, int* temphand) {
        -:  689:  //gain card with cost up to 5
        -:  690:  //Backup hand
        -:  691:  int i, x;
    #####:  692:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  693:	  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  694:	  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  695:  }
        -:  696:  //Backup hand
        -:  697:
        -:  698:  //Update Coins for Buy
    #####:  699:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  700:  x = 1;//Condition to loop on
    #####:  701:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  702:	  if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  703:	    if (DEBUG)
        -:  704:	      printf("None of that card left, sorry!\n");
        -:  705:
        -:  706:	    if (DEBUG){
        -:  707:	      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  708:	    }
        -:  709:	  }
    #####:  710:	  else if (state->coins > getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  711:	    printf("That card is too expensive!\n");
call    0 never executed
        -:  712:
        -:  713:	    if (DEBUG){
        -:  714:	      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  715:	    }
        -:  716:	  }
        -:  717:	  else{
        -:  718:
        -:  719:	    if (DEBUG){
        -:  720:	      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:	    }
        -:  722:
    #####:  723:	    gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  724:	    x = 0;//No more buying cards
        -:  725:
        -:  726:	    if (DEBUG){
        -:  727:	      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	    }
        -:  729:	  }
        -:  730:  }     
        -:  731:
        -:  732:  //Reset Hand
    #####:  733:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  734:	  state->hand[currentPlayer][i] = temphand[i];
    #####:  735:	  temphand[i] = -1;
        -:  736:  }
        -:  737:  //Reset Hand
        -:  738:      			
    #####:  739:  return 0;
        -:  740:}
        -:  741:
        -:  742:// Minion card effect
function minionCardEffect called 0 returned 0% blocks executed 0%
    #####:  743:int minionCardEffect(int choice1, int choice2, struct gameState* state, int currentPlayer, int handPos) {
        -:  744:  //+1 action
        -:  745:  int i, j;
    #####:  746:  state->numActions++;
        -:  747:			
        -:  748:  //discard card from hand
    #####:  749:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  750:			
    #####:  751:  if (choice1){		//+2 coins
branch  0 never executed
branch  1 never executed
    #####:  752:	  state->coins = state->coins + 2;
        -:  753:	}
        -:  754:			
    #####:  755:  else if (choice2){		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  756:	  //discard hand
    #####:  757:    while(numHandCards(state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  758:	    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  759:	  }
        -:  760:				
        -:  761:	  //draw 4
    #####:  762:	  for (i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####:  763:	    drawCard(currentPlayer, state);
call    0 never executed
        -:  764:	  }
        -:  765:				
        -:  766:	  //other players discard hand and redraw if hand size > 4
    #####:  767:	  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  768:	    if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  769:		    if ( state->handCount[i] > 4 ){
branch  0 never executed
branch  1 never executed
        -:  770:		      //discard hand
    #####:  771:		      while( state->handCount[i] > 0 ) {
branch  0 never executed
branch  1 never executed
    #####:  772:			      discardCard(handPos, i, state, 0);
call    0 never executed
        -:  773:			    }		
        -:  774:		      //draw 4
    #####:  775:		      for (j = 0; j < 4; j++){
branch  0 never executed
branch  1 never executed
    #####:  776:			      drawCard(i, state);
call    0 never executed
        -:  777:			    }
        -:  778:		    }
        -:  779:		  }
        -:  780:	  }		
        -:  781:	}
    #####:  782:  return 0;
        -:  783:}
        -:  784:
        -:  785:// Village card effect
function villageCardEffect called 1 returned 100% blocks executed 100%
        1:  786:int villageCardEffect(struct gameState* state, int currentPlayer, int handPos) {
        -:  787:  //+1 Card
        1:  788:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  789:			
        -:  790:  //+2 Actions
        1:  791:  state->numActions = state->numActions + 1;
        -:  792:			
        -:  793:  //discard played card from hand
        1:  794:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  795:  return 0;
        -:  796:}
        -:  797:
        -:  798:
function cardEffect called 4 returned 100% blocks executed 6%
        4:  799:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  800:{
        -:  801:  int i;
        -:  802:  int j;
        -:  803:  int k;
        -:  804:  int index;
        4:  805:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  806:  int nextPlayer = currentPlayer + 1;
        -:  807:
        4:  808:  int tributeRevealedCards[2] = {-1, -1};
        -:  809:  int temphand[MAX_HAND];// moved above the if statement
        4:  810:  int drawntreasure=0;
        4:  811:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  812:    nextPlayer = 0;
        -:  813:  }
        -:  814:  
        -:  815:	
        -:  816:  //uses switch to select card and perform actions
        4:  817:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:    {
        -:  819:    case adventurer:
        1:  820:      return adventurerCardEffect(drawntreasure, state, currentPlayer, temphand);
call    0 returned 100%
        -:  821:			
        -:  822:    case council_room:
        -:  823:      //+4 Cards
    #####:  824:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  825:	{
    #####:  826:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  827:	}
        -:  828:			
        -:  829:      //+1 Buy
    #####:  830:      state->numBuys++;
        -:  831:			
        -:  832:      //Each other player draws a card
    #####:  833:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  834:	{
    #####:  835:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  836:	    {
    #####:  837:	      drawCard(i, state);
call    0 never executed
        -:  838:	    }
        -:  839:	}
        -:  840:			
        -:  841:      //put played card in played card pile
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  843:			
    #####:  844:      return 0;
        -:  845:			
        -:  846:    case feast:
    #####:  847:      return feastCardEffect(choice1, state, currentPlayer, temphand);
call    0 never executed
        -:  848:     
        -:  849:			
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:
    #####:  896:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  897:
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  900:
        -:  901:      //discard trashed card
    #####:  902:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  903:	{
    #####:  904:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  905:	    {
    #####:  906:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  907:	      break;
        -:  908:	    }
        -:  909:	}
        -:  910:
        -:  911:
    #####:  912:      return 0;
        -:  913:		
        -:  914:    case smithy:
        1:  915:      return smithyCardEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  916:		
        -:  917:    case village:
        1:  918:      return villageCardEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  919:		
        -:  920:    case baron:
    #####:  921:      state->numBuys++;//Increase buys by 1!
    #####:  922:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  923:	int p = 0;//Iterator for hand!
    #####:  924:	int card_not_discarded = 1;//Flag for discard set!
    #####:  925:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  926:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  927:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  928:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  929:	    state->discardCount[currentPlayer]++;
    #####:  930:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  931:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  932:	    }
    #####:  933:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  934:	    state->handCount[currentPlayer]--;
    #####:  935:	    card_not_discarded = 0;//Exit the loop
        -:  936:	  }
    #####:  937:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  938:	    if(DEBUG) {
        -:  939:	      printf("No estate cards in your hand, invalid choice\n");
        -:  940:	      printf("Must gain an estate if there are any\n");
        -:  941:	    }
    #####:  942:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  944:	      state->supplyCount[estate]--;//Decrement estates
    #####:  945:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:		isGameOver(state);
call    0 never executed
        -:  947:	      }
        -:  948:	    }
    #####:  949:	    card_not_discarded = 0;//Exit the loop
        -:  950:	  }
        -:  951:			    
        -:  952:	  else{
    #####:  953:	    p++;//Next card
        -:  954:	  }
        -:  955:	}
        -:  956:      }
        -:  957:			    
        -:  958:      else{
    #####:  959:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  961:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  962:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  963:	    isGameOver(state);
call    0 never executed
        -:  964:	  }
        -:  965:	}
        -:  966:      }
        -:  967:	    
        -:  968:      
    #####:  969:      return 0;
        -:  970:		
        -:  971:    case great_hall:
        -:  972:      //+1 Card
        1:  973:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  974:			
        -:  975:      //+1 Actions
        1:  976:      state->numActions++;
        -:  977:			
        -:  978:      //discard card from hand
        1:  979:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  980:      return 0;
        -:  981:		
        -:  982:    case minion:
    #####:  983:      return minionCardEffect(choice1, choice2, state, currentPlayer, handPos);
call    0 never executed
        -:  984:		
        -:  985:    case steward:
    #####:  986:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  987:	{
        -:  988:	  //+2 cards
    #####:  989:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  990:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  991:	}
    #####:  992:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //+2 coins
    #####:  995:	  state->coins = state->coins + 2;
        -:  996:	}
        -:  997:      else
        -:  998:	{
        -:  999:	  //trash 2 cards in hand
    #####: 1000:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1001:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1002:	}
        -: 1003:			
        -: 1004:      //discard card from hand
    #####: 1005:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1006:      return 0;
        -: 1007:		
        -: 1008:    case tribute:
    #####: 1009:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1010:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1011:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1012:	  state->deckCount[nextPlayer]--;
        -: 1013:	}
    #####: 1014:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1015:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1016:	  state->discardCount[nextPlayer]--;
        -: 1017:	}
        -: 1018:	else{
        -: 1019:	  //No Card to Reveal
        -: 1020:	  if (DEBUG){
        -: 1021:	    printf("No cards to reveal\n");
        -: 1022:	  }
        -: 1023:	}
        -: 1024:      }
        -: 1025:	    
        -: 1026:      else{
    #####: 1027:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1028:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1029:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1030:	    state->deckCount[nextPlayer]++;
    #####: 1031:	    state->discard[nextPlayer][i] = -1;
    #####: 1032:	    state->discardCount[nextPlayer]--;
        -: 1033:	  }
        -: 1034:			    
    #####: 1035:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1036:	} 
    #####: 1037:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1038:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1039:	state->deckCount[nextPlayer]--;
    #####: 1040:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
        -: 1043:      }    
        -: 1044:		       
    #####: 1045:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1046:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1047:	state->playedCardCount++;
    #####: 1048:	tributeRevealedCards[1] = -1;
        -: 1049:      }
        -: 1050:
    #####: 1051:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1052:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1053:	  state->coins += 2;
        -: 1054:	}
        -: 1055:		    
    #####: 1056:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1057:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1059:	}
        -: 1060:	else{//Action Card
    #####: 1061:	  state->numActions = state->numActions + 2;
        -: 1062:	}
        -: 1063:      }
        -: 1064:	    
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case ambassador:
    #####: 1068:      j = 0;		//used to check if player has enough cards to discard
        -: 1069:
    #####: 1070:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1071:	{
    #####: 1072:	  return -1;				
        -: 1073:	}
        -: 1074:
    #####: 1075:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  return -1;
        -: 1078:	}
        -: 1079:
    #####: 1080:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1083:	    {
    #####: 1084:	      j++;
        -: 1085:	    }
        -: 1086:	}
    #####: 1087:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  return -1;				
        -: 1090:	}
        -: 1091:
        -: 1092:      if (DEBUG) 
        -: 1093:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1094:
        -: 1095:      //increase supply count for choosen card by amount being discarded
    #####: 1096:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1097:			
        -: 1098:      //each other player gains a copy of revealed card
    #####: 1099:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1102:	    {
    #####: 1103:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1104:	    }
        -: 1105:	}
        -: 1106:
        -: 1107:      //discard played card from hand
    #####: 1108:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1109:
        -: 1110:      //trash copies of cards returned to supply
    #####: 1111:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1114:	    {
    #####: 1115:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1116:		{
    #####: 1117:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1118:		  break;
        -: 1119:		}
        -: 1120:	    }
        -: 1121:	}			
        -: 1122:
    #####: 1123:      return 0;
        -: 1124:		
        -: 1125:    case cutpurse:
        -: 1126:
    #####: 1127:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1128:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1131:	    {
    #####: 1132:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1133:		{
    #####: 1134:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1135:		    {
    #####: 1136:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1137:		      break;
        -: 1138:		    }
    #####: 1139:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1140:		    {
    #####: 1141:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1142:			{
        -: 1143:			  if (DEBUG)
        -: 1144:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1145:			}	
    #####: 1146:		      break;
        -: 1147:		    }		
        -: 1148:		}
        -: 1149:					
        -: 1150:	    }
        -: 1151:				
        -: 1152:	}				
        -: 1153:
        -: 1154:      //discard played card from hand
    #####: 1155:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1156:
    #####: 1157:      return 0;
        -: 1158:
        -: 1159:		
        -: 1160:    case embargo: 
        -: 1161:      //+2 Coins
    #####: 1162:      state->coins = state->coins + 2;
        -: 1163:			
        -: 1164:      //see if selected pile is in play
    #####: 1165:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1166:	{
    #####: 1167:	  return -1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //add embargo token to selected supply pile
    #####: 1171:      state->embargoTokens[choice1]++;
        -: 1172:			
        -: 1173:      //trash card
    #####: 1174:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case outpost:
        -: 1178:      //set outpost flag
    #####: 1179:      state->outpostPlayed++;
        -: 1180:			
        -: 1181:      //discard card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case salvager:
        -: 1186:      //+1 buy
    #####: 1187:      state->numBuys++;
        -: 1188:			
    #####: 1189:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1190:	{
        -: 1191:	  //gain coins equal to trashed card
    #####: 1192:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1193:	  //trash card
    #####: 1194:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1195:	}
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case sea_hag:
    #####: 1202:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1203:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1205:	  state->discardCount[i]++;
    #####: 1206:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1207:	}
        -: 1208:      }
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case treasure_map:
        -: 1212:      //search hand for another treasure_map
    #####: 1213:      index = -1;
    #####: 1214:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1217:	    {
    #####: 1218:	      index = i;
    #####: 1219:	      break;
        -: 1220:	    }
        -: 1221:	}
    #####: 1222:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
        -: 1224:	  //trash both treasure cards
    #####: 1225:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1226:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1227:
        -: 1228:	  //gain 4 Gold cards
    #####: 1229:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:	    {
    #####: 1231:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1232:	    }
        -: 1233:				
        -: 1234:	  //return success
    #####: 1235:	  return 1;
        -: 1236:	}
        -: 1237:			
        -: 1238:      //no second treasure_map found in hand
    #####: 1239:      return -1;
        -: 1240:    }
        -: 1241:	
    #####: 1242:  return -1;
        -: 1243:}
        -: 1244:
function discardCard called 3 returned 100% blocks executed 89%
        3: 1245:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1246:{
        -: 1247:	
        -: 1248:  //if card is not trashed, added to Played pile 
        3: 1249:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1250:    {
        -: 1251:      //add card to played pile
        3: 1252:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1253:      state->playedCardCount++;
        -: 1254:    }
        -: 1255:	
        -: 1256:  //set played card to -1
        3: 1257:  state->hand[currentPlayer][handPos] = -1;
        -: 1258:	
        -: 1259:  //remove card from player's hand
        3: 1260:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1261:    {
        -: 1262:      //reduce number of cards in hand
        2: 1263:      state->handCount[currentPlayer]--;
        -: 1264:    }
        1: 1265:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
        -: 1270:  else 	
        -: 1271:    {
        -: 1272:      //replace discarded card with last card in hand
        1: 1273:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1274:      //set last card to -1
        1: 1275:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1276:      //reduce number of cards in hand
        1: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:	
        3: 1280:  return 0;
        -: 1281:}
        -: 1282:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1283:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1284:{
        -: 1285:  //Note: supplyPos is enum of choosen card
        -: 1286:	
        -: 1287:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1288:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1289:    {
    #####: 1290:      return -1;
        -: 1291:    }
        -: 1292:	
        -: 1293:  //added card for [whoseTurn] current player:
        -: 1294:  // toFlag = 0 : add to discard
        -: 1295:  // toFlag = 1 : add to deck
        -: 1296:  // toFlag = 2 : add to hand
        -: 1297:
    #####: 1298:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1299:    {
    #####: 1300:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1301:      state->deckCount[player]++;
        -: 1302:    }
    #####: 1303:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1304:    {
    #####: 1305:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1306:      state->handCount[player]++;
        -: 1307:    }
        -: 1308:  else
        -: 1309:    {
    #####: 1310:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1311:      state->discardCount[player]++;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //decrease number in supply pile
    #####: 1315:  state->supplyCount[supplyPos]--;
        -: 1316:	 
    #####: 1317:  return 0;
        -: 1318:}
        -: 1319:
function updateCoins called 0 returned 0% blocks executed 0%
    #####: 1320:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1321:{
        -: 1322:  int i;
        -: 1323:	
        -: 1324:  //reset coin count
    #####: 1325:  state->coins = 0;
        -: 1326:
        -: 1327:  //add coins for each Treasure card in player's hand
    #####: 1328:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -: 1329:    {
    #####: 1330:      if (state->hand[player][i] == copper)
branch  0 never executed
branch  1 never executed
        -: 1331:	{
    #####: 1332:	  state->coins += 1;
        -: 1333:	}
    #####: 1334:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1335:	{
    #####: 1336:	  state->coins += 2;
        -: 1337:	}
    #####: 1338:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1339:	{
    #####: 1340:	  state->coins += 3;
        -: 1341:	}	
        -: 1342:    }	
        -: 1343:
        -: 1344:  //add bonus
    #####: 1345:  state->coins += bonus;
        -: 1346:
    #####: 1347:  return 0;
        -: 1348:}
        -: 1349:
        -: 1350:
        -: 1351://end of dominion.c
        -: 1352:
